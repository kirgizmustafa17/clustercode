plugins {
    id "java"
    id "idea"
    id 'com.github.johnrengelman.shadow' version '2.0.4'
}

group "clustercode"
version "2.0.0"

targetCompatibility = 1.11
sourceCompatibility = 1.11

repositories {
    mavenCentral()
}

ext {
    guiceVersion = "4.2.2"
    ver_log4j2 = "2.11.+"
    ver_junit = "5.3.1"
    ver_vertx = "3.7.1"
    ver_micrometer = "1.1.+"

}

def generatedSrcPath = "${projectDir}/src/main/generated"
def generatedSrcDir = file(generatedSrcPath)

allprojects {
    idea {
        module {
            inheritOutputDirs = false
            outputDir = compileJava.destinationDir
            testOutputDir = compileTestJava.destinationDir
            generatedSourceDirs += generatedSrcDir
        }
    }
}


gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        options.annotationProcessorPath = configurations.annotationProcessor
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:1.18.+"
    annotationProcessor "org.projectlombok:lombok:1.18.+"
    testCompileOnly "org.projectlombok:lombok:1.18.+"

    compile "com.google.inject.extensions:guice-multibindings:${guiceVersion}"
    compile "javax.inject:javax.inject:1"
    compile "org.aeonbits.owner:owner:1.0.10"

    // Couchdb
    compile "org.ektorp:org.ektorp:1.+"

    // vertx
    compileOnly "io.vertx:vertx-codegen:${ver_vertx}"
    annotationProcessor "io.vertx:vertx-codegen:${ver_vertx}"
    compile "io.vertx:vertx-service-proxy:${ver_vertx}"
    annotationProcessor "io.vertx:vertx-service-proxy:${ver_vertx}"
    compile "io.vertx:vertx-circuit-breaker:${ver_vertx}"
    compile "io.vertx:vertx-web:${ver_vertx}"
    compile "io.vertx:vertx-config:${ver_vertx}"
    compile "io.vertx:vertx-rx-java2:${ver_vertx}"
    compile "io.vertx:vertx-health-check:${ver_vertx}"
    compile "io.vertx:vertx-rabbitmq-client:${ver_vertx}"


    // metrics
    compile "io.vertx:vertx-micrometer-metrics:${ver_vertx}"
    compile "io.micrometer:micrometer-registry-prometheus:${ver_micrometer}"

    // logging
    compile "org.slf4j:slf4j-api:2.0.0-alpha0"
    runtime "org.apache.logging.log4j:log4j-api:${ver_log4j2}"
    runtime "org.apache.logging.log4j:log4j-core:${ver_log4j2}"
    runtime "org.apache.logging.log4j:log4j-slf4j18-impl:${ver_log4j2}"

    // testing
    testRuntime "org.apache.logging.log4j:log4j-slf4j18-impl:${ver_log4j2}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${ver_junit}"
    testCompile "org.junit.jupiter:junit-jupiter-api:${ver_junit}"
    testCompile "org.mockito:mockito-core:2.+"
    testCompile "com.google.jimfs:jimfs:1.+"
    testCompile "org.assertj:assertj-core:3.11.1"

}

sourceSets {
    main {
        java {
            srcDirs += generatedSrcPath
        }
    }
}

shadowJar {
    manifest {
        attributes "Main-Class": "clustercode.main.Startup", "Implementation-Version": version, "Multi-Release": true
    }
    baseName = "clustercode"
    classifier = null
    version = null
}

task downloadDependenciesCustom(type: Exec) {
    configurations.testRuntime.files
    //commandLine "echo", "Downloaded all dependencies"
    //commandLine "print", "Downloaded all dependencies"
}

task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                if (configuration.isCanBeResolved()) configuration.resolve()
            }
            subProject.configurations.each { configuration ->
                if (configuration.isCanBeResolved()) configuration.resolve()
            }
        }
    }
}

task generateVertxSources(type: JavaCompile, group: 'build', description: 'Generates the Vertx code') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.compileOnly
    options.compilerArgs = [
            "-proc:only",
            "-processor", "io.vertx.codegen.CodeGenProcessor", // vertx processor here
            "-Acodegen.output=${generatedSrcDir.absolutePath}"
    ]
    destinationDir = generatedSrcDir
}

compileJava {
    dependsOn(generateVertxSources)
    // specify javac arguments
}

clean {
    delete += generatedSrcDir
}
